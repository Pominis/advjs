{
  "type": "object",
  "properties": {
    "rules": {
      "description": "Rules to generate CSS utilities.\n\nLater entries have higher priority.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Rule<Theme>"
      }
    },
    "separators": {
      "description": "Variant separator",
      "default": "[':', '-']",
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "type": "string"
        }
      ]
    },
    "variants": {
      "description": "Variants that preprocess the selectors,\nhaving the ability to rewrite the CSS object.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Variant<Theme>"
      }
    },
    "shortcuts": {
      "description": "Similar to Windi CSS's shortcuts,\nallows you have create new utilities by combining existing ones.\n\nLater entries have higher priority.",
      "anyOf": [
        {
          "$ref": "#/definitions/StaticShortcutMap"
        },
        {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/ShortcutValue"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  {
                    "$ref": "#/definitions/RuleMeta"
                  }
                ],
                "minItems": 2,
                "maxItems": 3
              },
              {
                "$ref": "#/definitions/StaticShortcutMap"
              },
              {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/definitions/RegExp"
                  },
                  {
                    "type": "object"
                  },
                  {
                    "$ref": "#/definitions/RuleMeta"
                  }
                ],
                "minItems": 2,
                "maxItems": 3
              }
            ]
          }
        }
      ]
    },
    "blocklist": {
      "description": "Rules to exclude the selectors for your design system (to narrow down the possibilities).\nCombining `warnExcluded` options it can also help you identify wrong usages.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/BlocklistRule"
      }
    },
    "safelist": {
      "description": "Utilities that always been included",
      "type": "array",
      "items": {
        "type": [
          "string",
          "object"
        ]
      }
    },
    "extractors": {
      "description": "Extractors to handle the source file and outputs possible classes/selectors\nCan be language-aware.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Extractor"
      }
    },
    "extractorDefault": {
      "description": "Default extractor that are always applied.\nBy default it split the source code by whitespace and quotes.\n\nIt maybe be replaced by preset or user config,\nonly one default extractor can be presented,\nlater one will override the previous one.\n\nPass `null` or `false` to disable the default extractor.",
      "default": "import('@unocss/core').defaultExtractor",
      "anyOf": [
        {
          "$ref": "#/definitions/Extractor"
        },
        {
          "const": false,
          "type": "boolean"
        },
        {
          "type": "null"
        }
      ]
    },
    "preflights": {
      "description": "Raw CSS injections.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Preflight<Theme>"
      }
    },
    "theme": {
      "description": "Theme object for shared configuration between rules",
      "$ref": "#/definitions/Theme"
    },
    "layers": {
      "description": "Layer orders. Default to 0.",
      "$ref": "#/definitions/Record<string,number>"
    },
    "outputToCssLayers": {
      "description": "Output the internal layers as CSS Cascade Layers.",
      "anyOf": [
        {
          "$ref": "#/definitions/OutputCssLayersOptions"
        },
        {
          "type": "boolean"
        }
      ]
    },
    "sortLayers": {
      "description": "Custom function to sort layers.",
      "type": "object"
    },
    "preprocess": {
      "description": "Preprocess the incoming utilities, return falsy value to exclude",
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        {
          "type": "object"
        }
      ]
    },
    "postprocess": {
      "description": "Postprocess the generate utils object",
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        {
          "type": "object"
        }
      ]
    },
    "extendTheme": {
      "description": "Custom functions mutate the theme object.\n\nIt's also possible to return a new theme object to completely replace the original one.",
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        {
          "type": "object"
        }
      ]
    },
    "presets": {
      "description": "Presets",
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "#/definitions/Preset<Theme>"
          },
          {
            "$ref": "#/definitions/Promise<Preset<Theme>>"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PresetOrFactoryAwaitable<Theme>"
            }
          },
          {
            "type": "object"
          }
        ]
      }
    },
    "autocomplete": {
      "description": "Additional options for auto complete",
      "type": "object",
      "properties": {
        "templates": {
          "description": "Custom functions / templates to provide autocomplete suggestions",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": [
                  "string",
                  "object"
                ]
              }
            },
            {
              "type": [
                "string",
                "object"
              ]
            }
          ]
        },
        "extractors": {
          "description": "Custom extractors to pickup possible classes and\ntransform class-name style suggestions to the correct format",
          "anyOf": [
            {
              "$ref": "#/definitions/AutoCompleteExtractor"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AutoCompleteExtractor"
              }
            }
          ]
        },
        "shorthands": {
          "description": "Custom shorthands to provide autocomplete suggestions.\nif values is an array, it will be joined with `|` and wrapped with `()`",
          "$ref": "#/definitions/Record<string,string|string[]>"
        }
      }
    },
    "configResolved": {
      "description": "Hook to modify the resolved config.\n\nFirst presets runs first and the user config",
      "type": "object"
    },
    "details": {
      "description": "Expose internal details for debugging / inspecting\n\nAdded `rules`, `shortcuts`, `variants` to the context and expose the context object in `StringifiedUtil`\n\nYou don't usually need to set this.",
      "default": "`true` when `envMode` is `dev`, otherwise `false`",
      "type": "boolean"
    },
    "content": {
      "description": "Options for sources to be extracted as utilities usages.",
      "$ref": "#/definitions/ContentOptions"
    },
    "transformers": {
      "description": "Custom transformers to the source code.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SourceCodeTransformer"
      }
    },
    "shortcutsLayer": {
      "description": "Layout name of shortcuts",
      "default": "'shortcuts'",
      "type": "string"
    },
    "envMode": {
      "description": "Environment mode",
      "default": "'build'",
      "enum": [
        "build",
        "dev"
      ],
      "type": "string"
    },
    "legacy": {
      "description": "legacy.renderModernChunks need to be consistent with",
      "type": "object",
      "properties": {
        "renderModernChunks": {
          "type": "boolean"
        }
      },
      "required": [
        "renderModernChunks"
      ]
    },
    "mergeSelectors": {
      "description": "Merge utilities with the exact same body to save the file size",
      "default": true,
      "type": "boolean"
    },
    "warn": {
      "description": "Emit warning when matched selectors are presented in blocklist",
      "default": true,
      "type": "boolean"
    },
    "configFile": {
      "description": "Load from configs files\n\nset `false` to disable",
      "anyOf": [
        {
          "const": false,
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ]
    },
    "configDeps": {
      "description": "List of files that will also trigger config reloads",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "cli": {
      "type": "object",
      "properties": {
        "entry": {
          "anyOf": [
            {
              "$ref": "#/definitions/CliEntryItem"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CliEntryItem"
              }
            }
          ]
        }
      }
    }
  },
  "definitions": {
    "Rule<Theme>": {
      "anyOf": [
        {
          "type": "array",
          "items": [
            {
              "type": "string"
            },
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/CSSObject"
                },
                {
                  "type": "array",
                  "items": {
                    "description": "[property, value, operators?]\n\n- operators: Used to perform specific operations on value or property.",
                    "type": "array",
                    "items": [
                      {
                        "type": "string"
                      },
                      {
                        "type": [
                          "string",
                          "number"
                        ]
                      },
                      {
                        "anyOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    ],
                    "minItems": 2,
                    "maxItems": 3
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/CSSObject"
                      },
                      {
                        "type": "array",
                        "items": {
                          "description": "[property, value, operators?]\n\n- operators: Used to perform specific operations on value or property.",
                          "type": "array",
                          "items": [
                            {
                              "type": "string"
                            },
                            {
                              "type": [
                                "string",
                                "number"
                              ]
                            },
                            {
                              "anyOf": [
                                {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            }
                          ],
                          "minItems": 2,
                          "maxItems": 3
                        }
                      },
                      {
                        "$ref": "#/definitions/Partial<ControlSymbolsValue>"
                      },
                      {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "description": "[property, value, operators?]\n\n- operators: Used to perform specific operations on value or property.",
                              "type": "array",
                              "items": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": [
                                    "string",
                                    "number"
                                  ]
                                },
                                {
                                  "anyOf": [
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                }
                              ],
                              "minItems": 2,
                              "maxItems": 3
                            },
                            {
                              "type": "array",
                              "items": [
                                {
                                  "$ref": "#/definitions/typeofSymbolShortcutsNoMerge"
                                },
                                {
                                  "type": "boolean",
                                  "const": true
                                }
                              ],
                              "minItems": 2,
                              "maxItems": 2
                            },
                            {
                              "type": "array",
                              "items": [
                                {
                                  "$ref": "#/definitions/typeofSymbolNoMerge"
                                },
                                {
                                  "type": "boolean",
                                  "const": true
                                }
                              ],
                              "minItems": 2,
                              "maxItems": 2
                            },
                            {
                              "type": "array",
                              "items": [
                                {
                                  "$ref": "#/definitions/typeofSymbolVariants"
                                },
                                {
                                  "anyOf": [
                                    {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/VariantHandler"
                                      }
                                    },
                                    {
                                      "type": "object"
                                    }
                                  ]
                                }
                              ],
                              "minItems": 2,
                              "maxItems": 2
                            },
                            {
                              "type": "array",
                              "items": [
                                {
                                  "$ref": "#/definitions/typeofSymbolParent"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "minItems": 2,
                              "maxItems": 2
                            },
                            {
                              "type": "array",
                              "items": [
                                {
                                  "$ref": "#/definitions/typeofSymbolSelector"
                                },
                                {
                                  "type": "object"
                                }
                              ],
                              "minItems": 2,
                              "maxItems": 2
                            },
                            {
                              "type": "array",
                              "items": [
                                {
                                  "$ref": "#/definitions/typeofSymbolLayer"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "minItems": 2,
                              "maxItems": 2
                            },
                            {
                              "type": "array",
                              "items": [
                                {
                                  "$ref": "#/definitions/typeofSymbolSort"
                                },
                                {
                                  "type": "number"
                                }
                              ],
                              "minItems": 2,
                              "maxItems": 2
                            }
                          ]
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/RuleMeta"
            }
          ],
          "minItems": 2,
          "maxItems": 3
        },
        {
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/RegExp"
            },
            {
              "type": "object"
            },
            {
              "$ref": "#/definitions/RuleMeta"
            }
          ],
          "minItems": 2,
          "maxItems": 3
        }
      ]
    },
    "CSSObject": {
      "type": "object"
    },
    "Partial<ControlSymbolsValue>": {
      "type": "object",
      "properties": {
        "__@SymbolShortcutsNoMerge@18377": {
          "const": true,
          "type": "boolean"
        },
        "__@SymbolNoMerge@18379": {
          "const": true,
          "type": "boolean"
        },
        "__@SymbolVariants@18381": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariantHandler"
              }
            },
            {
              "type": "object"
            }
          ]
        },
        "__@SymbolParent@18383": {
          "type": "string"
        },
        "__@SymbolSelector@18385": {
          "type": "object"
        },
        "__@SymbolLayer@18387": {
          "type": "string"
        },
        "__@SymbolSort@18389": {
          "type": "number"
        }
      }
    },
    "VariantHandler": {
      "type": "object",
      "properties": {
        "handle": {
          "description": "Callback to process the handler.",
          "type": "object"
        },
        "matcher": {
          "description": "The result rewritten selector for the next round of matching",
          "type": "string"
        },
        "order": {
          "description": "Order in which the variant is applied to selector.",
          "type": "number"
        },
        "selector": {
          "description": "Rewrite the output selector. Often be used to append pseudo classes or parents.",
          "type": "object"
        },
        "body": {
          "description": "Rewrite the output css body. The input come in [key,value][] pairs.",
          "type": "object"
        },
        "parent": {
          "description": "Provide a parent selector(e.g. media query) to the output css.",
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ],
              "minItems": 2,
              "maxItems": 2
            },
            {
              "type": "string"
            }
          ]
        },
        "sort": {
          "description": "Order in which the variant is sorted within single rule.",
          "type": "number"
        },
        "layer": {
          "description": "Override layer to the output css.",
          "type": "string"
        }
      }
    },
    "typeofSymbolShortcutsNoMerge": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "__@toStringTag@16163": {
          "type": "string"
        }
      },
      "required": [
        "__@toStringTag@16163",
        "description"
      ]
    },
    "typeofSymbolNoMerge": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "__@toStringTag@16163": {
          "type": "string"
        }
      },
      "required": [
        "__@toStringTag@16163",
        "description"
      ]
    },
    "typeofSymbolVariants": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "__@toStringTag@16163": {
          "type": "string"
        }
      },
      "required": [
        "__@toStringTag@16163",
        "description"
      ]
    },
    "typeofSymbolParent": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "__@toStringTag@16163": {
          "type": "string"
        }
      },
      "required": [
        "__@toStringTag@16163",
        "description"
      ]
    },
    "typeofSymbolSelector": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "__@toStringTag@16163": {
          "type": "string"
        }
      },
      "required": [
        "__@toStringTag@16163",
        "description"
      ]
    },
    "typeofSymbolLayer": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "__@toStringTag@16163": {
          "type": "string"
        }
      },
      "required": [
        "__@toStringTag@16163",
        "description"
      ]
    },
    "typeofSymbolSort": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "__@toStringTag@16163": {
          "type": "string"
        }
      },
      "required": [
        "__@toStringTag@16163",
        "description"
      ]
    },
    "RuleMeta": {
      "type": "object",
      "properties": {
        "layer": {
          "description": "The layer name of this rule.",
          "default": "'default'",
          "type": "string"
        },
        "noMerge": {
          "description": "Option to not merge this selector even if the body are the same.",
          "default": false,
          "type": "boolean"
        },
        "sort": {
          "description": "Fine tune sort",
          "type": "number"
        },
        "autocomplete": {
          "description": "Templates to provide autocomplete suggestions",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "prefix": {
          "description": "Matching prefix before this util",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "internal": {
          "description": "Internal rules will only be matched for shortcuts but not the user code.",
          "default": false,
          "type": "boolean"
        },
        "__hash": {
          "description": "Store the hash of the rule boy",
          "type": "string"
        },
        "custom": {
          "description": "Custom metadata",
          "$ref": "#/definitions/Record<string,any>"
        }
      }
    },
    "Record<string,any>": {
      "type": "object"
    },
    "RegExp": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string"
        },
        "global": {
          "type": "boolean"
        },
        "ignoreCase": {
          "type": "boolean"
        },
        "multiline": {
          "type": "boolean"
        },
        "lastIndex": {
          "type": "number"
        },
        "flags": {
          "type": "string"
        },
        "sticky": {
          "type": "boolean"
        },
        "unicode": {
          "type": "boolean"
        },
        "dotAll": {
          "type": "boolean"
        }
      },
      "required": [
        "dotAll",
        "flags",
        "global",
        "ignoreCase",
        "lastIndex",
        "multiline",
        "source",
        "sticky",
        "unicode"
      ]
    },
    "Variant<Theme>": {
      "anyOf": [
        {
          "$ref": "#/definitions/VariantObject<Theme>"
        },
        {
          "type": "object"
        }
      ]
    },
    "VariantObject<Theme>": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the variant.",
          "type": "string"
        },
        "match": {
          "description": "The entry function to match and rewrite the selector for further processing.",
          "type": "object"
        },
        "order": {
          "description": "Sort for when the match is applied.",
          "type": "number"
        },
        "multiPass": {
          "description": "Allows this variant to be used more than once in matching a single rule",
          "default": false,
          "type": "boolean"
        },
        "autocomplete": {
          "description": "Custom function for auto complete",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": [
                  "string",
                  "object"
                ]
              }
            },
            {
              "type": [
                "string",
                "object"
              ]
            }
          ]
        }
      },
      "required": [
        "match"
      ]
    },
    "StaticShortcutMap": {
      "type": "object"
    },
    "ShortcutValue": {
      "anyOf": [
        {
          "$ref": "#/definitions/CSSObject"
        },
        {
          "type": "array",
          "items": {
            "description": "[property, value, operators?]\n\n- operators: Used to perform specific operations on value or property.",
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "type": [
                  "string",
                  "number"
                ]
              },
              {
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            ],
            "minItems": 2,
            "maxItems": 3
          }
        },
        {
          "type": "string"
        }
      ]
    },
    "BlocklistRule": {
      "anyOf": [
        {
          "$ref": "#/definitions/RegExp"
        },
        {
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/BlocklistValue"
            },
            {
              "$ref": "#/definitions/BlocklistMeta"
            }
          ],
          "minItems": 2,
          "maxItems": 2
        },
        {
          "type": [
            "string",
            "object"
          ]
        }
      ]
    },
    "BlocklistValue": {
      "anyOf": [
        {
          "$ref": "#/definitions/RegExp"
        },
        {
          "type": [
            "string",
            "object"
          ]
        }
      ]
    },
    "BlocklistMeta": {
      "type": "object",
      "properties": {
        "message": {
          "description": "Custom message to show why this selector is blocked.",
          "type": [
            "string",
            "object"
          ]
        }
      }
    },
    "Extractor": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "order": {
          "type": "number"
        },
        "extract": {
          "description": "Extract the code and return a list of selectors.\n\nReturn `undefined` to skip this extractor.",
          "type": "object"
        }
      },
      "required": [
        "name"
      ]
    },
    "Preflight<Theme>": {
      "type": "object",
      "properties": {
        "getCSS": {
          "type": "object"
        },
        "layer": {
          "type": "string"
        }
      },
      "required": [
        "getCSS"
      ]
    },
    "Theme": {
      "type": "object"
    },
    "Record<string,number>": {
      "type": "object"
    },
    "OutputCssLayersOptions": {
      "type": "object",
      "properties": {
        "cssLayerName": {
          "description": "Specify the css layer that the internal layer should be output to.\n\nReturn `null` to specify that the layer should not be output to any css layer.",
          "type": "object"
        }
      }
    },
    "Preset<Theme>": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "enforce": {
          "description": "Enforce the preset to be applied before or after other presets",
          "enum": [
            "post",
            "pre"
          ],
          "type": "string"
        },
        "options": {
          "description": "Preset options for other tools like IDE to consume",
          "$ref": "#/definitions/PresetOptions"
        },
        "prefix": {
          "description": "Apply prefix to all utilities and shortcuts",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "layer": {
          "description": "Apply layer to all utilities and shortcuts",
          "type": "string"
        },
        "api": {
          "description": "Custom API endpoint for cross-preset communication"
        },
        "meta": {
          "description": "Custom metadata for the preset",
          "$ref": "#/definitions/Record<string,any>"
        },
        "rules": {
          "description": "Rules to generate CSS utilities.\n\nLater entries have higher priority.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Rule<Theme>"
          }
        },
        "separators": {
          "description": "Variant separator",
          "default": "[':', '-']",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "variants": {
          "description": "Variants that preprocess the selectors,\nhaving the ability to rewrite the CSS object.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variant<Theme>"
          }
        },
        "shortcuts": {
          "description": "Similar to Windi CSS's shortcuts,\nallows you have create new utilities by combining existing ones.\n\nLater entries have higher priority.",
          "anyOf": [
            {
              "$ref": "#/definitions/StaticShortcutMap"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "string"
                      },
                      {
                        "anyOf": [
                          {
                            "type": "array",
                            "items": {
                              "$ref": "#/definitions/ShortcutValue"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      {
                        "$ref": "#/definitions/RuleMeta"
                      }
                    ],
                    "minItems": 2,
                    "maxItems": 3
                  },
                  {
                    "$ref": "#/definitions/StaticShortcutMap"
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "$ref": "#/definitions/RegExp"
                      },
                      {
                        "type": "object"
                      },
                      {
                        "$ref": "#/definitions/RuleMeta"
                      }
                    ],
                    "minItems": 2,
                    "maxItems": 3
                  }
                ]
              }
            }
          ]
        },
        "blocklist": {
          "description": "Rules to exclude the selectors for your design system (to narrow down the possibilities).\nCombining `warnExcluded` options it can also help you identify wrong usages.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlocklistRule"
          }
        },
        "safelist": {
          "description": "Utilities that always been included",
          "type": "array",
          "items": {
            "type": [
              "string",
              "object"
            ]
          }
        },
        "extractors": {
          "description": "Extractors to handle the source file and outputs possible classes/selectors\nCan be language-aware.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Extractor"
          }
        },
        "extractorDefault": {
          "description": "Default extractor that are always applied.\nBy default it split the source code by whitespace and quotes.\n\nIt maybe be replaced by preset or user config,\nonly one default extractor can be presented,\nlater one will override the previous one.\n\nPass `null` or `false` to disable the default extractor.",
          "default": "import('@unocss/core').defaultExtractor",
          "anyOf": [
            {
              "$ref": "#/definitions/Extractor"
            },
            {
              "const": false,
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "preflights": {
          "description": "Raw CSS injections.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Preflight<Theme>"
          }
        },
        "theme": {
          "description": "Theme object for shared configuration between rules",
          "$ref": "#/definitions/Theme"
        },
        "layers": {
          "description": "Layer orders. Default to 0.",
          "$ref": "#/definitions/Record<string,number>"
        },
        "outputToCssLayers": {
          "description": "Output the internal layers as CSS Cascade Layers.",
          "anyOf": [
            {
              "$ref": "#/definitions/OutputCssLayersOptions"
            },
            {
              "type": "boolean"
            }
          ]
        },
        "sortLayers": {
          "description": "Custom function to sort layers.",
          "type": "object"
        },
        "preprocess": {
          "description": "Preprocess the incoming utilities, return falsy value to exclude",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            {
              "type": "object"
            }
          ]
        },
        "postprocess": {
          "description": "Postprocess the generate utils object",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            {
              "type": "object"
            }
          ]
        },
        "extendTheme": {
          "description": "Custom functions mutate the theme object.\n\nIt's also possible to return a new theme object to completely replace the original one.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            {
              "type": "object"
            }
          ]
        },
        "presets": {
          "description": "Presets",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/Preset<Theme>"
              },
              {
                "$ref": "#/definitions/Promise<Preset<Theme>>"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PresetOrFactoryAwaitable<Theme>"
                }
              },
              {
                "type": "object"
              }
            ]
          }
        },
        "autocomplete": {
          "description": "Additional options for auto complete",
          "type": "object",
          "properties": {
            "templates": {
              "description": "Custom functions / templates to provide autocomplete suggestions",
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": [
                      "string",
                      "object"
                    ]
                  }
                },
                {
                  "type": [
                    "string",
                    "object"
                  ]
                }
              ]
            },
            "extractors": {
              "description": "Custom extractors to pickup possible classes and\ntransform class-name style suggestions to the correct format",
              "anyOf": [
                {
                  "$ref": "#/definitions/AutoCompleteExtractor"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AutoCompleteExtractor"
                  }
                }
              ]
            },
            "shorthands": {
              "description": "Custom shorthands to provide autocomplete suggestions.\nif values is an array, it will be joined with `|` and wrapped with `()`",
              "$ref": "#/definitions/Record<string,string|string[]>"
            }
          }
        },
        "configResolved": {
          "description": "Hook to modify the resolved config.\n\nFirst presets runs first and the user config",
          "type": "object"
        },
        "details": {
          "description": "Expose internal details for debugging / inspecting\n\nAdded `rules`, `shortcuts`, `variants` to the context and expose the context object in `StringifiedUtil`\n\nYou don't usually need to set this.",
          "default": "`true` when `envMode` is `dev`, otherwise `false`",
          "type": "boolean"
        },
        "content": {
          "description": "Options for sources to be extracted as utilities usages.",
          "$ref": "#/definitions/ContentOptions"
        },
        "transformers": {
          "description": "Custom transformers to the source code.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceCodeTransformer"
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "PresetOptions": {
      "type": "object"
    },
    "Promise<Preset<Theme>>": {
      "type": "object",
      "properties": {
        "__@toStringTag@16163": {
          "type": "string"
        }
      },
      "required": [
        "__@toStringTag@16163"
      ]
    },
    "PresetOrFactoryAwaitable<Theme>": {
      "anyOf": [
        {
          "$ref": "#/definitions/Preset<Theme>"
        },
        {
          "$ref": "#/definitions/Promise<Preset<Theme>>"
        },
        {
          "type": "object"
        }
      ]
    },
    "AutoCompleteExtractor": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "extract": {
          "type": "object"
        },
        "order": {
          "type": "number"
        }
      },
      "required": [
        "extract",
        "name"
      ]
    },
    "Record<string,string|string[]>": {
      "type": "object"
    },
    "ContentOptions": {
      "type": "object",
      "properties": {
        "filesystem": {
          "description": "Glob patterns to extract from the file system, in addition to other content sources.\n\nIn dev mode, the files will be watched and trigger HMR.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inline": {
          "description": "Inline text to be extracted",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "code"
                ]
              },
              {
                "type": [
                  "string",
                  "object"
                ]
              }
            ]
          }
        },
        "pipeline": {
          "description": "Filters to determine whether to extract certain modules from the build tools' transformation pipeline.\n\nCurrently only works for Vite and Webpack integration.\n\nSet `false` to disable.",
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "include": {
                  "description": "Patterns that filter the files being extracted.\nSupports regular expressions and `picomatch` glob patterns.\n\nBy default, `.ts` and `.js` files are NOT extracted.",
                  "default": "[/\\.(vue|svelte|[jt]sx|vine.ts|mdx?|astro|elm|php|phtml|html)($|\\?)/]",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/RegExp"
                    },
                    {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/RegExp"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    {
                      "type": [
                        "null",
                        "string"
                      ]
                    }
                  ]
                },
                "exclude": {
                  "description": "Patterns that filter the files NOT being extracted.\nSupports regular expressions and `picomatch` glob patterns.\n\nBy default, `node_modules` and `dist` are also extracted.",
                  "default": "[/\\.(css|postcss|sass|scss|less|stylus|styl)($|\\?)/]",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/RegExp"
                    },
                    {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/RegExp"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    {
                      "type": [
                        "null",
                        "string"
                      ]
                    }
                  ]
                }
              }
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        }
      }
    },
    "SourceCodeTransformer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "enforce": {
          "description": "The order of transformer",
          "enum": [
            "default",
            "post",
            "pre"
          ],
          "type": "string"
        },
        "idFilter": {
          "description": "Custom id filter, if not provided, the extraction filter will be applied",
          "type": "object"
        },
        "transform": {
          "description": "The transform function",
          "type": "object"
        }
      },
      "required": [
        "name",
        "transform"
      ]
    },
    "CliEntryItem": {
      "type": "object",
      "properties": {
        "patterns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "outFile": {
          "type": "string"
        }
      },
      "required": [
        "outFile",
        "patterns"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}
